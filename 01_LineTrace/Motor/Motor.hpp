#ifndef ___MOTOR_CLASS
#define ___MOTOR_CLASS

/* g++でコンパイルするときCリンケージを教える */
#ifdef __cplusplus
extern "C" {
#endif

#include "pbio/port.h"
#include "spike/pup/motor.h"

#ifdef __cplusplus
}
#endif


/* モータクラス */
class Motor {
public:
    /*----------------------------------------------------------------
    *  関数名  ：  コンストラクタ
    *  概要    ：  モータの初期化
    *  引数    ：  ポートID、回転方向（時計回りor反時計回り）
    *  返り値  ：
    ------------------------------------------------------------------*/
    Motor(pbio_port_id_t motor_port, pup_direction_t positive_direction);

    /*----------------------------------------------------------------
    *  関数名  ：  デストラクタ
    *  概要    ：  モータを止める
    *  引数    ：  なし
    *  返り値  ：
    ------------------------------------------------------------------*/
    ~Motor();

    /*----------------------------------------------------------------
    *  関数名  ：  resetCount
    *  概要    ：  エンコーダ値のリセット
    *  引数    ：  なし
    *  返り値  ：  なし
    ------------------------------------------------------------------*/
    void resetCount();

    /*----------------------------------------------------------------
    *  関数名  ：  getCount
    *  概要    ：  エンコーダ値の取得
    *  引数    ：  なし
    *  返り値  ：  エンコーダ値
    ------------------------------------------------------------------*/
    int32_t getCount();

    /*----------------------------------------------------------------
    *  関数名  ：  getSpeed
    *  概要    ：  回転速度の取得
    *  引数    ：  なし
    *  返り値  ：  回転速度
    ------------------------------------------------------------------*/
    int32_t getSpeed();

    /*----------------------------------------------------------------
    *  関数名  ：  setSpeed
    *  概要    ：  回転速度の設定
    *  引数    ：  回転速度
    *  返り値  ：  なし
    ------------------------------------------------------------------*/
    void setSpeed(int speed);

    /*----------------------------------------------------------------
    *  関数名  ：  getPower
    *  概要    ：  パワー値の取得
    *  引数    ：  なし
    *  返り値  ：  パワー値
    ------------------------------------------------------------------*/
    int32_t getPower();

    /*----------------------------------------------------------------
    *  関数名  ：  setPower
    *  概要    ：  パワー値の設定
    *  引数    ：  パワー値
    *  返り値  ：  なし
    ------------------------------------------------------------------*/
    void setPower(int power);

    /*----------------------------------------------------------------
    *  関数名  ：  stop
    *  概要    ：  モータを止める
    *  引数    ：  なし
    *  返り値  ：  なし
    ------------------------------------------------------------------*/
    void stop();

    /*----------------------------------------------------------------
    *  関数名  ：  brake
    *  概要    ：  ブレーキをかけてモータを止める
    *  引数    ：  なし
    *  返り値  ：  なし
    ------------------------------------------------------------------*/
    void brake();

    /*----------------------------------------------------------------
    *  関数名  ：  hold
    *  概要    ：  モータを止めて角度を維持する
    *  引数    ：  なし
    *  返り値  ：  なし
    ------------------------------------------------------------------*/
    void hold();

    /*----------------------------------------------------------------
    *  関数名  ：  isStalled
    *  概要    ：  モータがストールしているか調べる
    *  引数    ：  なし
    *  返り値  ：  ストールしている（true）or ストールしていない（false）
    ------------------------------------------------------------------*/
    bool isStalled();

    /*----------------------------------------------------------------
    *  関数名  ：  setDutyLimit
    *  概要    ：  モータのデューティー値を下げる
    *  引数    ：  新しいデューティー値
    *  返り値  ：  元の状態に戻すための最大電圧
    ------------------------------------------------------------------*/
    int32_t setDutyLimit(int duty_limit);

    /*----------------------------------------------------------------
    *  関数名  ：  restoreDutyLimit
    *  概要    ：  モータのデューティー値を元に戻す
    *  引数    ：  pup_motor_set_duty_limitの戻り値
    *  返り値  ：  なし
    ------------------------------------------------------------------*/
    void restoreDutyLimit(int old_value);

private:
    static const int8_t POWER_MAX = 100;    // パワー値の最大
    static const int8_t POWER_MIN = -100;   // パワー値の最小   
    static const int8_t DUTY_MAX = 100;     // デューティー値の最大
    static const int8_t DUTY_MIN = 0;       // デューティー値の最小

    pup_motor_t* devptr;    // デバイスポインタ
    int mPower;             // パワー値

};

#endif // ___MOTOR_CLASS
